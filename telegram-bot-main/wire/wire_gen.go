// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/wire"
	"gorm.io/gorm"
	"telegram-bot/telegram-bot-main/app"
	"telegram-bot/telegram-bot-main/bot"
	"telegram-bot/telegram-bot-main/cache"
	"telegram-bot/telegram-bot-main/db"
	"telegram-bot/telegram-bot-main/env"
)

// Injectors from wire.go:

func InitializeApp() (*app.Application, error) {
	env := providerEnv()
	botAPI := providerBot(env)
	db := providerDB(env)
	contextContext := context.Background()
	cacher := providerCache(env, contextContext)
	application := providerApplication(botAPI, db, cacher)
	return application, nil
}

// wire.go:

var envSet = wire.NewSet(
	providerEnv,
)

var botSet = wire.NewSet(
	providerBot,
)

var dbSet = wire.NewSet(
	providerDB,
)

var cacheSet = wire.NewSet(context.Background, providerCache)

var applicationSet = wire.NewSet(
	providerApplication,
)

func providerEnv() *env.Env {
	return env.NewEnv()
}

func providerBot(env2 *env.Env) *tgbotapi.BotAPI {
	return bot.NewBot(env2)
}

func providerDB(env2 *env.Env) *gorm.DB {
	return db.NewDataBase(env2)
}

func providerCache(env2 *env.Env, ctx context.Context) cache.Cacher {
	return cache.NewRedisCache(env2, ctx)
}

func providerApplication(api *tgbotapi.BotAPI, db2 *gorm.DB, cache2 cache.Cacher) *app.Application {
	return app.NewApplication(api, db2, cache2)
}
